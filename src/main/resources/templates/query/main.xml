<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalsul.user.main.dao.MainDAO">
	
	<!--  메인페이지 호출 시 쿼리문 -->
	<select id="getMainPageProducts" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		where  p.product_no LIKE '20201%'
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		order by p.product_no
	</select>
	
	<!--  제품검색 시 검색결과 쿼리문 -->
	<select id="getSearchResult" parameterType="java.lang.String" resultType="product">
		select product_no, product_name
		from product
		where replace(product_name, ' ', '') like '%' || replace(#{keyword}, ' ', '') || '%'
	</select>
	
	<!-- 전체페이지 호출 시 쿼리문 -->
	<select id="getTotalPageProducts" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		order by p.product_no
	</select>
	
	<!-- 전체페이지 호출 시 쿼리문 - 평점순-->
	<select id="getProductsOrderByRating" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		order by review_rating desc nulls last, p.product_price desc
	</select> 
	
	<!-- 전체페이지 호출 시 쿼리문 - 리뷰 많은 순 -->
	<select id="getProductsOrderByReviewCount" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		order by review_num desc, p.product_price desc
	</select>
	
	<!--  전체페이지 호출 시 쿼리문 - 가격 높은 순 -->
	<select id="getProductsOrderByPriceHigh" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		order by p.product_price desc, review_rating asc, review_num asc
	</select>
	
		<!--  전체페이지 호출 시 쿼리문 - 가격 낮은 순 -->
	<select id="getProductsOrderByPriceLow" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		order by p.product_price asc, review_rating asc, review_num asc
	</select>
	
	<!-- 전체페이지 필터 사용시 쿼리문 -->
	<select id="getTotalResult" parameterType="java.lang.String" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		 <where>
    	<!-- 필터링 조건 -->
    	<if test="filter == 'filter1'">
      		and r.review_rating >= 4
    	</if>
    	<if test="filter == 'filter2'">
      		and p.product_price >= 100
    	</if>
    <!-- 필터링 조건 추가 -->
 	 </where>	
		order by p.product_no		
	</select>
	
	<!-- 전체페이지 셀렉트바 사용시 쿼리문-->
	<select id="getSelectResult" parameterType="java.lang.String" resultType="product">
		select p.product_no, p.product_name, p.product_price, p.product_main_image,
		count(r.review_no) review_num, round(avg(r.review_rating),1)
		review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		group by p.product_no, p.product_name,
		p.product_price, p.product_main_image
		<where>
		   <choose>
            <when test="selectedValue == 'rating'">
                <!-- 평점순 정렬 조건 -->
                 ORDER BY review_rating DESC
            </when>
            <when test="selectedValue == 'star_count'">
                <!-- 리뷰 많은 순 정렬 조건 -->
                ORDER BY review_num DESC
            </when>
            <when test="selectedValue == 'price_high'">
                <!-- 높은 가격순 정렬 조건 -->
                ORDER BY p.product_price DESC
            </when>
            <when test="selectedValue == 'price_low'">
                <!-- 낮은 가격순 정렬 조건 -->
                ORDER BY p.product_price ASC
            </when>
        </choose>
   	 </where>	
	</select> 
	
	
	<!-- 상세페이지 호출 시 쿼리문 -->
	<select id="getDetailPageProducts" parameterType="product" resultType="product">
		select p.product_no, p.product_name, p.product_type, p.product_ml, p.product_alcohol,  p.product_price, p.product_stock,
		p.product_main_image, p.product_explain_image, count(r.review_no) review_num, round(avg(r.review_rating),1) review_rating
		from product p
		left outer join review r on
		p.product_no = r.product_no
		where p.product_no = #{product_no}
		group by p.product_no,
         p.product_name,
         p.product_type,
         p.product_ml,
         p.product_alcohol,
         p.product_price,
         p.product_stock,
         p.product_main_image,
         p.product_explain_image
	</select>
	

</mapper>