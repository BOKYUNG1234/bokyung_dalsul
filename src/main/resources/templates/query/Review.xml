<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalsul.user.review.dao.ReviewDAO">
	
	<sql id="reviewSearch">
		<if test="search=='review_content'">
			<![CDATA[ LOWER(review_content) like '%'|| LOWER( #{keyword} ) || '%' ]]>
		</if>
		<if test="search=='product_name'">
			<![CDATA[ LOWER(product_name) like '%'|| LOWER( #{keyword} ) || '%' ]]>
		</if>
		<if test="search=='review_no'">
			<![CDATA[ review_no = #{keyword} ]]>
		</if>
		<if test="search=='user_no'">
			<![CDATA[ user_no = #{keyword} ]]>
		</if>
		<if test="search=='review_rating'">
			<![CDATA[ review_rating = #{keyword} ]]>
		</if>
	</sql>
	
	
	<sql id="reviewOrderBySql">
		 <if test="reviewOrderBy != null">
		    <choose>
		        <when test="reviewOrderBy == 'obReviewNo'">order by review_no desc</when>
		        <when test="reviewOrderBy == 'obUserNo'">order by user_no desc</when>
		        <when test="reviewOrderBy == 'obLikeCount'">order by review_like_count desc</when>
		        <when test="reviewOrderBy == 'obReviewDate'">order by review_date desc</when>
		        <otherwise>order by review_no desc</otherwise>
		    </choose>
		</if>
	</sql>
	
	
	<!-- 제품 번호로 리뷰 조회(상세페이지) pk.package_product_no = #{package_product_no}
	<select id="detailReviewList" parameterType="review" resultType="review">
		SELECT * FROM REVIEW_VIEW
		<if test="product_no != 0">
			WHERE product_no = #{product_no}
		</if>
        ORDER BY REVIEW_NO desc
	</select> -->
	

	
	<!-- 마이페이지 리뷰 조회 -->
	<select id="myReviewList" parameterType="review" resultType="review">
		SELECT * FROM REVIEW
		<if test="user_no != null">
		WHERE USER_NO = #{user_no}
		</if>
		ORDER BY REVIEW_NO desc
	</select>
	

	
 
	<!--  관리자 페이지 리뷰 조회 (뷰) -->
 	<select id="managerReviewList" parameterType="review" resultType="review">
		SELECT
		    REVIEW_NO, REVIEW_CONTENT, REVIEW_RATING, REVIEW_LIKE_COUNT, PRODUCT_NAME, PRODUCT_TYPE, PRODUCT_NO,
		    PRODUCT_ML, PRODUCT_PRICE, USER_NO, TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD') as REVIEW_DATE, rnum
		from (
		    SELECT
		        REVIEW_NO, 
		        REVIEW_CONTENT, 
		        REVIEW_DATE,
		        REVIEW_RATING,
		        REVIEW_LIKE_COUNT,
		        ROWNUM RNUM,
		        USER_NO,
		        PRODUCT_NAME,
		        PRODUCT_TYPE,
		        PRODUCT_ML,
		        PRODUCT_PRICE,
		        PRODUCT_NO
		   		FROM 
		   		(
		    SELECT 
		    R.REVIEW_NO,
		    R.REVIEW_CONTENT,
		    R.REVIEW_DATE,
		    R.REVIEW_RATING,
		    R.REVIEW_LIKE_COUNT,
		    R.USER_NO,
		    P.PRODUCT_NAME,
		    P.PRODUCT_TYPE,
		    P.PRODUCT_ML,
		    P.PRODUCT_PRICE,
		    P.PRODUCT_NO
		    from REVIEW r FULL OUTER JOIN PRODUCT p ON r.PRODUCT_NO = p.PRODUCT_NO 
		    <include refid="reviewOrderBySql"></include>
			)
		    WHERE 
		    <trim prefix="" suffix=" AND ">
			   <include refid="reviewSearch"></include>
			</trim>
		    <if test="searchDate2 != null and searchDate1 != null">
				<![CDATA[ review_date between #{searchDate1} and #{searchDate2} and ]]>
			</if>	
			 <![CDATA[    rownum <= #{pageNum} * 10) 
				where rnum > (#{pageNum} -1) * 10]]>
	</select>
	

	
	

	<!-- 제품 넘버로 리뷰 조회(상세페이지) -->
	<select id="detailReviewList" parameterType="product" resultType="review">
					
		select 
		r.review_no, 
		r.review_rating, 
		r.user_no, 
		TO_CHAR(R.REVIEW_DATE, 'YYYY-MM-DD') as REVIEW_DATE, 
		p.product_name, 
		p.product_main_image, 
		p.product_no, 
		r.review_like_count, 
		r.review_content
		from review r left outer join product p on r.product_no = p.product_no
        where r.product_no = #{product_no}
	</select>
	
	<!-- 해당 제품중 리뷰 점수가 가장 높은 리뷰 -->
	<select id="detailReviewListBest" parameterType="product" resultType="review">
		
		SELECT
		    r.review_no, 
		    r.review_rating, 
		    r.user_no, 
		    TO_CHAR(R.REVIEW_DATE, 'YYYY-MM-DD') as REVIEW_DATE, 
		    p.product_name, 
		    p.product_main_image, 
		    p.product_no, 
		    r.review_like_count, 
		    r.review_content
		FROM review r
		LEFT OUTER JOIN product p ON r.product_no = p.product_no
		WHERE r.product_no = #{product_no} AND r.review_like_count = 
		    (SELECT MAX(review_like_count) FROM review WHERE product_no = #{product_no})
	</select>
	

	<!--  리뷰 삭제  -->
	<delete id="myReviewDelete" parameterType="review">
		DELETE REVIEW
		WHERE REVIEW_NO = #{review_no}
	</delete>


	
	<!-- 마이페이지 리뷰작성 (#{order_no}, #{user_no}) -->
	<insert id="myReviewInsert" parameterType="review">
		insert into review(review_no, order_no, user_no, review_content, review_rating, review_like_count, review_date, product_no)
		values(review_seq.nextval, 2, #{user_no}, #{review_content}, #{review_rating}, 0, sysdate, #{product_no})
	</insert>



	<!-- 마이페이지 리뷰 업데이트 -->
	<update id="myReviewUpdate" parameterType="review">
		update review
		set review_content = #{review_content}, review_rating = #{review_rating}
		where review_no = #{review_no}
	</update>
	
	
	<!--  좋아요 클릭시  -->
	<update id="reviewLikeCountPlus" parameterType="review">
		UPDATE REVIEW
		SET REVIEW_LIKE_COUNT = REVIEW_LIKE_COUNT + 1
		WHERE REVIEW_NO = #{review_no}
	</update>


	<!-- 좋아요 개수 조회 -->
	<select id="reviewLikeCount" resultType="int">
		select review_like_count
		from review
		where review_no = #{review_no}
	</select>



	<!-- 전체 레코드 수 조회 -->
	<select id="reviewListCnt" parameterType="review" resultType="int">
		select count(*) from review
		<trim prefix=" where(" suffix=")" >
			<include refid="reviewSearch"></include>
		</trim>
	</select>


</mapper>