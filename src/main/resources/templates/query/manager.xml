<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalsul.manager.dao.CommonManagerDAO">

	<!-- 회원 조회 검색어 -->
	<sql id="userSearch"> 
		<if test="search == 'user_no'">
			<![CDATA[ user_no LIKE '%' || #{keyword} || '%' ]]>
		</if>
		<if test="search == 'user_email'">
			<![CDATA[ user_email LIKE '%' || #{keyword} || '%' ]]>
		</if>
		<if test="search == 'user_name'">
			<![CDATA[ user_name LIKE '%' || #{keyword} || '%' ]]>
		</if>
		<if test="search == 'user_status'">
			<![CDATA[ user_status LIKE '%' || #{keyword} || '%' ]]>
		</if>
	</sql>

	<select id="getUserList" parameterType="userVO" resultType="userVO">
		<![CDATA[
		SELECT USER_NO, USER_EMAIL, USER_NAME, 
		TO_CHAR(USER_BIRTH_DATE,'YYYY-MM-DD') as user_birth, 
		TO_CHAR(SUBSTR(USER_PHONE, 1, 3) || '-' || SUBSTR(USER_PHONE, 4, 4) || '-' || SUBSTR(USER_PHONE, 8, 4)) as user_phone_num,
		TO_CHAR(USER_REG_DATE,'YYYY-MM-DD') as user_reg_date, USER_STATUS
		FROM (
        		SELECT rownum as rnum, USER_NO, USER_EMAIL, USER_NAME, USER_BIRTH_DATE, USER_PHONE, USER_REG_DATE, USER_STATUS
        		FROM USERS
        		WHERE ]]>
					<trim prefix="(" suffix=") AND " prefixOverrides="AND">
						<include refid="userSearch"></include>
					</trim>
					<![CDATA[ rownum <= #{pageNum} * #{amount}
				ORDER BY USER_NO
			 ) userlist
		WHERE rnum > (#{pageNum} - 1) * #{amount} ]]>
	</select>
	
	<select id="userListCnt" parameterType="userVO" resultType="int">
		SELECT count(*) 
		FROM USERS
		<trim prefix=" where (" suffix=")">
			<include refid="userSearch"></include>
		</trim>
	</select>
	
	<delete id="dropUsers" parameterType="java.util.List">
    	DELETE FROM USERS
    	WHERE USER_NO IN
    	<foreach collection="list" item="user_no" open="(" separator="," close=")">
        	#{user_no}
    	</foreach>
	</delete>
	
	
	
	<!-- product에서 가져오려는데 productVO가 설정 파일에 없음... 
	<select id="managerMainChart" resultType="product">
	</select>
	
		select product_type, count(*) as product_type_count
		from product
		group by product_type
	
	</select>
	-->
	
	<select id="managerMainChart" resultType="product">
		
		SELECT 
		    p.product_type, 
		    COUNT(distinct p.product_no) as product_type_count,
		    floor(AVG(p.product_price)) as avg_price,
		    ROUND(AVG(r.review_rating),1) as avg_rating,
		    MAX(CASE WHEN r.review_rating = sub.max_rating THEN p.product_name ELSE NULL END) as best_product
		FROM 
		product p FULL OUTER JOIN review r ON p.product_no = r.product_no
		    JOIN (
		        SELECT 
		            product_type,
		            MAX(review_rating) as max_rating
		        FROM 
		            product p 
		            FULL OUTER JOIN review r ON p.product_no = r.product_no
		        GROUP BY 
		            product_type
		    ) sub ON p.product_type = sub.product_type
		GROUP BY 
		    p.product_type
				
	</select>
	
	
	
	<select id="managerMainCount" resultType="managerCommon">
		SELECT 
		   (SELECT COUNT(product_no) FROM product) AS product_count,
		   (SELECT COUNT(review_no) FROM review) AS review_count,
		   (SELECT COUNT(user_no) FROM USERS) AS users_count,
		   (SELECT COUNT(user_no) FROM users WHERE user_reg_date >= TRUNC(sysdate)) AS today_users_count,
		   (SELECT COUNT(review_no) FROM review WHERE review_date >= TRUNC(sysdate)) AS today_review_count,
		   (SELECT COUNT(product_no) FROM product WHERE product_reg_date >= TRUNC(sysdate)) AS today_product_count
		FROM DUAL
	
	</select>
	
	
	<select id="managerReviewChart" resultType="managerCommon">
			
		SELECT 
		    p.product_type,
		    COUNT(distinct r.review_no) AS review_count,
		    ROUND(AVG(r.review_rating), 1) AS avg_review_rating,
		    ROUND(AVG(p.product_alcohol), 1) AS avg_product_alcohol,
		    FLOOR(AVG(p.product_price)) AS avg_product_price
		FROM 
		    product p 
		LEFT JOIN review r ON p.product_no = r.product_no
		GROUP BY 
		    p.product_type
	 
	</select>
	
	<select id="managerReviewStatistics">
		SELECT 
			 (SELECT COUNT(review_no) FROM review) AS review_count,
			 (SELECT ROUND(AVG(REVIEW_RATING),2) FROM REVIEW) AS AVG_REVIEW_RATING,
			 (SELECT MAX(REVIEW_LIKE_COUNT) FROM REVIEW) AS REVIEW_LIKE_COUNT,
			 (SELECT COUNT(REVIEW_NO) FROM REVIEW WHERE review_date >= TRUNC(sysdate)) AS REVIEW_TODAY,
			 (SELECT REVIEW_NO 
			  FROM REVIEW 
			  WHERE REVIEW_LIKE_COUNT = (SELECT MAX(REVIEW_LIKE_COUNT) FROM REVIEW)) AS MAX_LIKE_REVIEW_NO,
			 (SELECT P.PRODUCT_NAME
			  FROM REVIEW R 
			  JOIN PRODUCT P ON R.PRODUCT_NO = P.PRODUCT_NO
			  WHERE R.REVIEW_LIKE_COUNT = (SELECT MAX(REVIEW_LIKE_COUNT) FROM REVIEW)) AS MAX_LIKE_PRODUCT_NAME,
			   (SELECT REVIEW_RATING 
			  FROM REVIEW 
			  WHERE REVIEW_LIKE_COUNT = (SELECT MAX(REVIEW_LIKE_COUNT) FROM REVIEW)) as max_review_rating
		FROM dual
	
	</select>
	
	

</mapper>